Декоратор — это структурный паттерн, который позволяет добавлять объектам новые поведения на лету, помещая их в объекты-обёртки.

Декоратор позволяет оборачивать объекты бесчисленное количество раз благодаря тому, что и обёртки, и реальные оборачиваемые объекты имеют общий интерфейс.

Применимость: Паттерн можно часто встретить в Java-коде, особенно в коде, работающем с потоками данных.

Примеры Декораторов в стандартных библиотеках Java:

Все подклассы java.io.InputStream, OutputStream, Reader и Writer имеют конструктор, принимающий объекты этих же классов.

java.util.Collections, методы checkedXXX(), synchronizedXXX() и unmodifiableXXX().

javax.servlet.http.HttpServletRequestWrapper и HttpServletResponseWrapper

Признаки применения паттерна: Декоратор можно распознать по создающим методам, которые принимают в параметрах объекты того же абстрактного типа или интерфейса, что и текущий класс.

Шифрование и сжатие данных
Пример показывает, как можно добавить новую функциональность объекту, не меняя его класса.

Сначала класс бизнес-логики мог считывать и записывать только чистые данные напрямую из/в файлы. Применив паттерн Декоратор, мы создали небольшие классы-обёртки, которые добавляют новые поведения до или после основной работы вложенного объекта бизнес-логики.

Первая обёртка шифрует и расшифрует данные, а вторая — сжимает и распакует их.

Мы можем использовать обёртки как отдельно друг от друга, так и все вместе, обернув один декоратор другим.