Заместитель — это объект, который выступает прослойкой между клиентом и реальным сервисным объектом. Заместитель получает вызовы от клиента,
выполняет свою функцию (контроль доступа, кеширование, изменение запроса и прочее), а затем передаёт вызов сервисному объекту.

Заместитель имеет тот же интерфейс, что и реальный объект, поэтому для клиента нет разницы — работать через заместителя или напрямую.

Применимость: Паттерн Заместитель применяется в Java коде тогда, когда надо заменить настоящий объект его суррогатом, причём незаметно для клиентов настоящего объекта.
Это позволит выполнить какие-то добавочные поведения до или после основного поведения настоящего объекта.

Примеры Заместителя в стандартных библиотеках Java:

java.lang.reflect.structural.Proxy
java.rmi.*
javax.ejb.EJB (см. комментарии)
javax.inject.Inject (см. комментарии)
javax.persistence.PersistenceContext
Признаки применения паттерна: Класс заместителя чаще всего делегирует всю настоящую работу своему реальному объекту.
Заместители часто сами следят за жизненным циклом своего реального объекта.

Кеширующий заместитель
Этот пример показывает как с помощью Заместителя можно сделать более эффективной коммуникацию по сети с внешним видеосервисом, кешируя повторяющиеся запросы.

Заместитель особенно полезен, если у вас нет доступа к коду служебных классов, поведение которых хочется улучшить.
Он позволяет изменить поведение реального объекта, прозрачно для клиентского кода. В этом примере заместитель и сам реальный объект взаимозаменяемы.